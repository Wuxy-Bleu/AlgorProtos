package basicStructure;

//p88 算法1.1  人家实现的栈，可以在自己编写完之后比较下得失。
//栈好像不需要被遍历吧。
//我发现一个设计上的问题，stack的实现类自己自己实现迭代器接口，而不是stack接口继承迭代器接口也可以啊。
public interface Stack<T> /**extends Iterable<T>**/
{
    void push(T item);

    //todo 第一 pop的实现，没有写好异常处理，
    // 或者说不是异常处理 循环执行pop方法时没有终止的条件，当前我只查看了数组的实现是这样的，会导致报错
    // 第二 当时没有考虑给栈和队列 实现迭代器，但是现在想想还是写一个，利用pop来实现foreach
    T pop();

    boolean isEmpty();

    int size();


}

/**
 * 对于泛型的思考
 * 对于在定义时使用泛型，写泛型只是因为其中的某个变量或者方法其中的某个数据类型不能确定罢了，不要把它想复杂了暂时。
 * 比如你当然可以一个非泛型类实现泛型接口，泛型类实现非泛型接口，等等等等。这其实和对于代码的设计有关的。
 * <p>
 * 但是在实例化泛型类的时候，不写泛型我是感觉很奇怪了，反正现在我会把所有的该写泛型的地方都写写好。
 */

